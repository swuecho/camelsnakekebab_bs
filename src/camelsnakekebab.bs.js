// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "@rescript/std/lib/es6/curry.js";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";

function uppercase(prim) {
  return prim.toUpperCase();
}

function lowercase(prim) {
  return prim.toLowerCase();
}

function index(prim0, prim1) {
  return prim0[prim1];
}

function capitalize(str) {
  return str.charAt(0).toUpperCase().concat(str.slice(1));
}

function capitalize_http_header(s) {
  var uppercase_s = s.toUpperCase();
  var uppercase_http_headers = [
    "CSP",
    "ATT",
    "WAP",
    "IP",
    "HTTP",
    "CPU",
    "DNT",
    "SSL",
    "UA",
    "TE",
    "WWW",
    "XSS",
    "MD5"
  ];
  if (uppercase_http_headers.includes(uppercase_s)) {
    return uppercase_s;
  } else {
    return capitalize(s);
  }
}

var word_sep = /\s+|_|-|(?<=[A-Z])(?=[A-Z][a-z])|(?<=[^A-Z_-])(?=[A-Z])|(?<=[A-Za-z0-9])(?=[^A-Za-z0-9])/;

function split_words(str) {
  return str.split(word_sep).map(Belt_Option.getExn);
}

function convert_case(convert_first, convert_rest, sep, str) {
  var words = split_words(str);
  var len = words.length;
  if (len === 1) {
    return words[0];
  }
  if (len === 0) {
    return "";
  }
  var first_word = Curry._1(convert_first, words[0]);
  var rest_words = words.slice(1).map(Curry.__1(convert_rest));
  return [first_word].concat(rest_words).join(sep);
}

function lower_camel_case(str) {
  return convert_case(lowercase, capitalize, "", str);
}

function upper_camel_case(str) {
  return convert_case(capitalize, capitalize, "", str);
}

function lower_snake_case(str) {
  return convert_case(lowercase, lowercase, "_", str);
}

function upper_snake_case(str) {
  return convert_case(capitalize, capitalize, "_", str);
}

function constant_case(str) {
  return convert_case(uppercase, uppercase, "_", str);
}

function kebab_case(str) {
  return convert_case(lowercase, lowercase, "-", str);
}

function http_header_case(str) {
  return convert_case(capitalize_http_header, capitalize_http_header, "-", str);
}

export {
  uppercase ,
  lowercase ,
  index ,
  capitalize ,
  capitalize_http_header ,
  word_sep ,
  split_words ,
  convert_case ,
  lower_camel_case ,
  upper_camel_case ,
  lower_snake_case ,
  upper_snake_case ,
  constant_case ,
  kebab_case ,
  http_header_case ,
  
}
/* No side effect */
